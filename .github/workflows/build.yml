name: Check Dawn Branches and Build Latest

on:
  schedule:
    # 每天 UTC 时间 02:00 运行（北京时间 10:00）
    - cron: "0 2 * * *"
  workflow_dispatch:

env:
  DAWN_REPO: "https://dawn.googlesource.com/dawn"

jobs:
  check-new-branches:
    runs-on: ubuntu-latest
    outputs:
      latest-branch: ${{ steps.check.outputs.latest-branch }}
      latest-version: ${{ steps.check.outputs.latest-version }}
      has-new-branch: ${{ steps.check.outputs.has-new-branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Check for new Dawn branches and find latest
        id: check
        run: |
          # 获取 Dawn 仓库的所有分支
          echo "Fetching Dawn repository branches..."
          git ls-remote --heads $DAWN_REPO | grep 'refs/heads/chromium/' > current_branches.txt

          # 创建 previous_branches.txt 如果不存在
          if [ ! -f previous_branches.txt ]; then
            touch previous_branches.txt
          fi

          # 比较找出新分支
          new_branches=$(comm -13 <(sort previous_branches.txt) <(sort current_branches.txt))

          if [ -n "$new_branches" ]; then
            echo "New branches found:"
            echo "$new_branches"

            # 从新分支中提取版本号并找到最大的
            max_version=0
            latest_branch=""

            while IFS= read -r line; do
              if [ -n "$line" ]; then
                branch_name=$(echo "$line" | awk '{print $2}' | sed 's|refs/heads/||')
                version=$(echo "$branch_name" | sed 's|chromium/||')
                echo "Found branch: $branch_name with version: $version"
                if [ "$version" -gt "$max_version" ]; then
                  max_version=$version
                  latest_branch=$branch_name
                fi
              fi
            done <<< "$new_branches"

            if [ -n "$latest_branch" ]; then
              echo "Latest branch to build: $latest_branch (version: $max_version)"
              echo "has-new-branch=true" >> $GITHUB_OUTPUT
              echo "latest-branch=$latest_branch" >> $GITHUB_OUTPUT
              echo "latest-version=$max_version" >> $GITHUB_OUTPUT
            else
              echo "No valid branches found"
              echo "has-new-branch=false" >> $GITHUB_OUTPUT
            fi

            cp current_branches.txt previous_branches.txt
            git add previous_branches.txt
            git commit -m "Update tracked branches - Latest: $latest_branch" || true
            git push || true
          else
            echo "No new branches found"
            echo "has-new-branch=false" >> $GITHUB_OUTPUT
            echo "latest-branch=" >> $GITHUB_OUTPUT
            echo "latest-version=" >> $GITHUB_OUTPUT
          fi

  build-dawn:
    needs: check-new-branches
    if: needs.check-new-branches.outputs.has-new-branch == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Setup dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            python3 \
            ninja-build \
            python3-pip \
            libx11-dev \
            libxi-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            mesa-common-dev \
            libx11-xcb-dev \
            pkg-config \
            nodejs \
            npm

      - name: Setup dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja python pkg-config node

      - name: Setup dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja python git nodejs -y

      - name: Set environment variables
        shell: bash
        run: |
          echo "BRANCH_NAME=${{ needs.check-new-branches.outputs.latest-branch }}" >> $GITHUB_ENV
          echo "VERSION=${{ needs.check-new-branches.outputs.latest-version }}" >> $GITHUB_ENV
          echo "SAFE_BRANCH_NAME=$(echo "${{ needs.check-new-branches.outputs.latest-branch }}" | sed 's|/|-|g')" >> $GITHUB_ENV
          echo "PLATFORM_SUFFIX=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Clone Dawn repository
        run: |
          git clone --depth 1 --branch ${{ env.BRANCH_NAME }} ${{ env.DAWN_REPO }} dawn-source

      - name: Configure Dawn build with CMake
        if: runner.os != 'Windows'
        run: |
          cd dawn-source
          cmake -B out/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../dawn-install \
            -DDAWN_FETCH_DEPENDENCIES=ON \
            -DDAWN_ENABLE_INSTALL=ON \
            -G Ninja

      - name: Configure Dawn build with CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dawn-source
          $installDir = Join-Path $PWD "dawn-install"
          cmake -B out/Release `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="$installDir" `
            -DDAWN_FETCH_DEPENDENCIES=ON `
            -DDAWN_ENABLE_INSTALL=ON `
            -DWINDOWS_STORE=OFF `
            -G Ninja

      - name: Build Dawn
        run: |
          cd dawn-source
          cmake --build out/Release --parallel

      - name: Install Dawn
        run: |
          cd dawn-source
          cmake --install out/Release

      - name: Package build artifacts (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Branch: ${{ env.BRANCH_NAME }}" > dawn-install/BUILD_INFO.txt
          echo "Chromium Version: ${{ env.VERSION }}" >> dawn-install/BUILD_INFO.txt
          echo "Build Date: $(date -u)" >> dawn-install/BUILD_INFO.txt
          echo "Build ID: ${{ github.run_id }}" >> dawn-install/BUILD_INFO.txt
          echo "Platform: ${{ runner.os }}" >> dawn-install/BUILD_INFO.txt
          echo "CMake Configuration: Release" >> dawn-install/BUILD_INFO.txt

          PKG_NAME=dawn-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}-x64
          tar -czf ${PKG_NAME}.tar.gz dawn-install/

      - name: Package build artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:PKG_NAME = "dawn-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}-x64"
          Set-Content -Path dawn-install\BUILD_INFO.txt -Value "Branch: $env:BRANCH_NAME`nChromium Version: $env:VERSION`nBuild Date: $(Get-Date -Format u)`nBuild ID: $env:GITHUB_RUN_ID`nPlatform: Windows`nCMake Configuration: Release"
          Compress-Archive -Path dawn-install\* -DestinationPath "$env:PKG_NAME.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dawn-build-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}
          path: |
            dawn-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}-x64.tar.gz
            dawn-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}-x64.zip

      - name: Create Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.BRANCH_NAME }}
          name: "Dawn Build - ${{ env.BRANCH_NAME }}"
          files: |
            dawn-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}-x64.tar.gz
            dawn-${{ env.SAFE_BRANCH_NAME }}-${{ env.PLATFORM_SUFFIX }}-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: [check-new-branches, build-dawn]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old releases (keep latest 10)
        uses: dev-drprasad/delete-older-releases@v0.3.2
        with:
          keep_latest: 10
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
